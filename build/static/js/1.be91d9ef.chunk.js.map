{"version":3,"sources":["tonva-tools/entry/res/login.ts","tonva-tools/entry/res/register.ts","tonva-tools/entry/tools.tsx","tonva-tools/entry/register.tsx","tonva-tools/entry/login.tsx"],"names":["loginRes","_","a","registerRes","logo","__webpack_require__","tonvaTop","ui","loginTop","react","className","src","senders","type","caption","regex","getSender","un","find","v","test","register_RegisterController","_super","RegisterController","_this","apply","this","arguments","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","tslib_es6","prototype","internalStart","openVPage","register_AccountPage","toVerify","account","register_VerifyPage","toPassword","register_PasswordPage","toSuccess","register_RegSuccess","login","userApi","user","pwd","password","guest","then","retUser","undefined","alert","logined","_a","sent","regReturn","registerReturn","msg","checkAccount","Promise","isExists","ret","error","accountError","setVerify","execute","params","nick","country","mobile","email","verify","register","clear","register_ForgetController","ForgetController","resetPassword","AccountPage","schema","name","required","maxLength","res","Object","page","header","controller","style","marginLeft","marginRight","uiSchema","onButtonClick","onSubmit","onEnter","requiredFlag","context","clearContextErrors","value","getValue","sender","setError","length","open","items","widget","label","placeholder","openPage","VerifyPage","onVerifyChanged","prev","setDisabled","onChanged","submit","disabled","checkVerify","typeText","extra","PasswordPage","values","form","data","rePwd","setValue","RegSuccess","onClick","login_Login","Login","username","console","log","token","props","callback","clickReg","start","clickForget","render","footer","color","margin","withBack"],"mappings":"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","file":"static/js/1.be91d9ef.chunk.js","sourcesContent":["import { Res } from \"../../ui\";\r\n\r\nexport interface LoginRes {\r\n    a: string;\r\n}\r\n\r\nexport const loginRes: Res<LoginRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import { Res } from \"../../ui\";\r\n\r\nexport interface RegisterRes {\r\n    a: string;\r\n}\r\n\r\nexport const registerRes: Res<RegisterRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { nav, mobileRegex, emailRegex } from '../ui';\r\n\r\nconst logo = require('../img/logo.svg');\r\n\r\nexport function tonvaTop() {\r\n    return nav.loginTop(<div className=\"d-flex align-items-center\">\r\n        <img className=\"App-logo h-3c position-absolute\" src={logo} />\r\n        <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">同</span>\r\n            <span className=\"text-danger\">花</span>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\ninterface Sender {\r\n    type: string;\r\n    caption: string;\r\n    regex: RegExp;\r\n}\r\n\r\nconst senders:Sender[] = [\r\n    {type:'mobile', caption:'手机号', regex: mobileRegex},\r\n    {type:'email', caption:'邮箱', regex: emailRegex}\r\n];\r\n\r\nexport function getSender(un: string):Sender {\r\n    let sender = senders.find(v => v.regex.test(un) === true);\r\n    return sender;\r\n}","import * as React from 'react';\r\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, Controller, VPage, UiCustom, UiInputItem, NumSchema, View} from '../ui';\r\nimport userApi from './userApi';\r\nimport '../css/va-form.css';\r\nimport { RegisterRes, registerRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\n\r\nexport interface Values {\r\n    user: string;\r\n    pwd: string;\r\n    rePwd: string;\r\n    country?: string;\r\n    mobile?: string;\r\n    email?: string;\r\n}\r\n/*\r\nclass AccountInput extends TextWidget {\r\n    @observable private buttonDisabled: boolean = true;\r\n    private onClick = () => {\r\n        let {onButtonClick} = this.context.form.props;\r\n        if (onButtonClick === undefined) return;\r\n        onButtonClick(this.name, this.context);\r\n    }\r\n    protected onChange(evt: React.ChangeEvent<any>) {\r\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"input-group\">\r\n                <input ref={input=>this.input = input}\r\n                            className=\"form-control\"\r\n                            type={this.inputType}\r\n                            defaultValue={this.value}\r\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\r\n                            placeholder='手机号/邮箱'\r\n                            readOnly={this.readOnly}\r\n                            disabled={this.disabled}\r\n                            onKeyDown = {this.onKeyDown}\r\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\r\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\r\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-sm btn-outline-primary\"\r\n                        type=\"button\" disabled={this.buttonDisabled}\r\n                        onClick={this.onClick}>\r\n                        <small>发送验证码</small>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {this.renderErrors()}\r\n        </>;\r\n    }\r\n}\r\n*/\r\nexport class RegisterController extends Controller {\r\n    account: string;\r\n    type:'mobile'|'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n    accountPageCaption = '账号密码';\r\n    accountLabel = '注册账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '账号密码';\r\n    passwordSubmitCaption = '注册新账号'; \r\n    successText = '注册成功';\r\n\r\n    protected async internalStart() {\r\n        this.openVPage(AccountPage);\r\n    }\r\n\r\n    toVerify(account:string) {\r\n        this.account = account;\r\n        this.openVPage(VerifyPage);\r\n    }\r\n\r\n    toPassword() {\r\n        this.openVPage(PasswordPage);\r\n    }\r\n\r\n    toSuccess() {\r\n        this.openVPage(RegSuccess);\r\n    }\r\n\r\n    login() {\r\n        userApi\r\n            .login({user: this.account, pwd: this.password, guest: nav.guest})\r\n            .then(async retUser => {\r\n                if (retUser === undefined) {\r\n                    alert('something wrong!');\r\n                    return;\r\n                }\r\n                await nav.logined(retUser);\r\n            });\r\n    }\r\n\r\n    regReturn(registerReturn:number):string {\r\n        let msg:any;\r\n        switch (registerReturn) {\r\n            default: throw 'unknown return';\r\n            case 0:\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + this.account;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + this.account;\r\n                break;\r\n            case 3:\r\n                msg = '邮箱 ' + this.account;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n\r\n    async checkAccount():Promise<string> {\r\n        let ret = await userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await userApi.setVerify(this.account, this.type);\r\n        this.toVerify(this.account);\r\n        return;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return '已经被注册使用了';\r\n    }\r\n\r\n    async execute() {\r\n        let params = {\r\n            nick: undefined,\r\n            user: this.account, \r\n            pwd: this.password,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile': params.mobile = this.account; break;\r\n            case 'email': params.email = this.account; break;\r\n        }\r\n        let ret = await userApi.register(params);\r\n        if (ret === 0) {\r\n            nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        return this.regReturn(ret);\r\n    }\r\n}\r\n\r\nexport class ForgetController extends RegisterController {\r\n    accountPageCaption = '密码找回';\r\n    accountLabel = '账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '重置密码';\r\n    passwordSubmitCaption = '提交'; \r\n    successText = '成功修改密码';\r\n\r\n    async execute() {\r\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n        nav.clear();\r\n        this.toSuccess();\r\n        return undefined;\r\n        //return this.regReturn(ret);\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists === 0) return '请输入正确的账号';\r\n    }\r\n}\r\n\r\nclass AccountPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'verify', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n\r\n    protected res: RegisterRes = resLang(registerRes);\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.controller.accountLabel,\r\n                    placeholder: '手机号或邮箱',\r\n                } as UiTextItem, \r\n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\r\n            }\r\n        }\r\n                \r\n            this.openPage(this.page);\r\n    }\r\n\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.accountPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {tonvaTop()}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter} \r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, '必须是手机号或邮箱');\r\n            return;\r\n        }\r\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, '请输入正确的手机号');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'user') {\r\n            return await this.onSubmit('verify', context);\r\n        }\r\n    }\r\n}\r\n\r\nclass VerifyPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length != 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: '验证码',\r\n                placeholder: '请输入验证码',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '下一步 >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n    }\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = this.controller.verify = context.getValue('verify');\r\n        let ret = await userApi.checkVerify(this.controller.account, verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', '验证码错误');\r\n            return;\r\n        }\r\n        this.controller.toPassword();\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'verify') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = '手机号'; break;\r\n            case 'email': \r\n                typeText = '邮箱'; \r\n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\r\n                break;\r\n        }\r\n        return <Page header=\"验证码\">\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                验证码已经发送到{typeText}<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                {extra}\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit} \r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass PasswordPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n                rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\r\n            }\r\n        }\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            return '密码错误，请重新输入密码！';\r\n        }\r\n        this.controller.password = pwd;\r\n        return await this.controller.execute();\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'rePwd') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.passwordPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                注册账号<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass RegSuccess extends VPage<RegisterController> {\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n\r\n    private page = () => {\r\n        const {account, successText} = this.controller;\r\n        return (\r\n        <Page header={false}>\r\n            <div className=\"container w-max-30c\">\r\n                <form className=\"my-5\">\r\n                    <div className=\"py-5\">\r\n                        账号 <strong className=\"text-primary\">{account} </strong> {successText}！\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-block\" onClick={() => this.controller.login()}>\r\n                        直接登录\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </Page>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../ui';\r\nimport { RegisterController, ForgetController } from './register';\r\nimport userApi from './userApi';\r\nimport { LoginRes, loginRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { User } from '../user';\r\n\r\nconst schema: Schema = [\r\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'login', type: 'submit'},\r\n];\r\n\r\nexport interface LoginProps {\r\n    withBack?: boolean;\r\n    callback?: (user:User) => Promise<void>;\r\n    //top?: any;\r\n}\r\n\r\nexport default class Login extends React.Component<LoginProps> {\r\n    private res: LoginRes = resLang(loginRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            username: {placeholder: '手机/邮箱/用户名', label: '登录账号'} as UiTextItem,\r\n            password: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '登录'} as UiButton,\r\n        }\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let un = values['username'];\r\n        let pwd = values['password'];\r\n        if (pwd === undefined) {\r\n            return 'something wrong, pwd is undefined';\r\n        }\r\n        let user = await userApi.login({\r\n            user: un,\r\n            pwd: pwd,\r\n            guest: nav.guest,\r\n        });\r\n\r\n        if (user === undefined) {\r\n            let sender = getSender(un);\r\n            let type:string = sender !== undefined? sender.caption : '用户名';\r\n            return type + '或密码错！';\r\n        }\r\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\r\n        await nav.logined(user, this.props.callback);\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'password') {\r\n            return await this.onSubmit('login', context);\r\n        }\r\n    }\r\n    private clickReg = () => {\r\n        //nav.replace(<RegisterView />);\r\n        let register = new RegisterController(undefined);\r\n        register.start();\r\n    }\r\n    private clickForget = () => {\r\n        let forget = new ForgetController(undefined);\r\n        forget.start();\r\n    }\r\n    render() {\r\n        let footer = <div className='text-center'>\r\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\r\n                onClick={this.clickReg}>\r\n                注册账号\r\n            </button>\r\n        </div>;\r\n        let header:string|boolean|JSX.Element = false;\r\n        if (this.props.withBack === true) {\r\n            header = '登录';\r\n        }\r\n        return <Page header={header} footer={footer}>\r\n            <div className=\"d-flex h-100 flex-column justify-content-center align-items-center\">\r\n                <div className=\"flex-fill\" />\r\n                <div className=\"w-20c\">\r\n                    {tonvaTop()}\r\n                    <div className=\"h-2c\" />\r\n                    <Form schema={schema} uiSchema={this.uiSchema} \r\n                        onButtonClick={this.onSubmit} \r\n                        onEnter={this.onEnter}\r\n                        requiredFlag={false} />\r\n                    <button className=\"btn btn-link btn-block\"\r\n                        onClick={() => this.clickForget()}>\r\n                        忘记密码\r\n                    </button>\r\n                </div>\r\n                <div className=\"flex-fill\" />\r\n                <div className=\"flex-fill\" />\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n"],"sourceRoot":""}